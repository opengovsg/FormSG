const axios = require('axios')
const _ = require('lodash')

const { WebhookValidationError } = require('../utils/custom-errors')
const mongoose = require('mongoose')
const {
  getEncryptSubmissionModel,
} = require('../models/submission.server.model')
const EncryptSubmission = getEncryptSubmissionModel(mongoose)
// Prevents JSON.stringify error for circular JSONs and BigInts
const { stringifySafe } = require('../../shared/util/stringify-safe')
const formsgSdk = require('../../config/formsg-sdk')
const logger = require('../../config/logger').createLoggerWithLabel(module)

/**
 * Logs webhook failure in console and database.
 * @param {error} error Error object returned by axios
 * @param {Object} webhookParams Parameters which fully specify webhook
 * @param {string} webhookParams.webhookUrl URL to POST to
 * @param {Object} webhookParams.submissionWebhookView POST body
 * @param {string} webhookParams.submissionId
 * @param {string} webhookParams.formId
 * @param {string} webhookParams.now Epoch for POST header
 * @param {string} webhookParams.signature Signature generated by FormSG SDK
 */
const handleWebhookFailure = (error, webhookParams) => {
  logWebhookFailure(error, webhookParams)
  updateSubmissionsDb(
    webhookParams.formId,
    webhookParams.submissionId,
    getFailureDbUpdate(error, webhookParams),
  )
}

/**
 * Logs webhook success in console and database.
 * @param {response} response Response object returned by axios
 * @param {Object} webhookParams Parameters which fully specify webhook
 * @param {string} webhookParams.webhookUrl URL to POST to
 * @param {Object} webhookParams.submissionWebhookView POST body
 * @param {string} webhookParams.submissionId
 * @param {string} webhookParams.formId
 * @param {string} webhookParams.now Epoch for POST header
 * @param {string} webhookParams.signature Signature generated by FormSG SDK
 */
const handleWebhookSuccess = (response, webhookParams) => {
  logWebhookSuccess(response, webhookParams)
  updateSubmissionsDb(
    webhookParams.formId,
    webhookParams.submissionId,
    getSuccessDbUpdate(response, webhookParams),
  )
}

/**
 * Sends webhook POST.
 * Note that the arguments are the same as those in webhookParams
 * for handleWebhookSuccess and handleWebhookFailure, just destructured.
 * @param {string} webhookUrl URL to POST to
 * @param {Object} submissionWebhookView POST body
 * @param {string} submissionId
 * @param {string} formId
 * @param {string} now Epoch for POST header
 * @param {string} signature Signature generated by FormSG SDK
 */
const postWebhook = ({
  webhookUrl,
  submissionWebhookView,
  submissionId,
  formId,
  now,
  signature,
}) => {
  return axios.post(webhookUrl, submissionWebhookView, {
    headers: {
      'X-FormSG-Signature': formsgSdk.webhooks.constructHeader({
        epoch: now,
        submissionId,
        formId,
        signature,
      }),
    },
    maxRedirects: 0,
  })
}

// Logging for webhook success
const logWebhookSuccess = (
  response,
  { webhookUrl, submissionId, formId, now, signature },
) => {
  logger.info({
    message: 'Webhook POST succeeded',
    meta: {
      action: 'logWebhookSuccess',
      meta: {
        status: _.get(response, 'status'),
        submissionId,
        formId,
        now,
        webhookUrl,
        signature,
      },
    },
  })
}

// Logging for webhook failure
const logWebhookFailure = (
  error,
  { webhookUrl, submissionId, formId, now, signature },
) => {
  const logMeta = {
    action: 'logWebhookFailure',
    submissionId,
    formId,
    now,
    webhookUrl,
    signature,
  }

  if (error instanceof WebhookValidationError) {
    logger.error({
      message: 'Webhook not attempted',
      meta: logMeta,
      error,
    })
  } else {
    logger.error({
      message: 'Webhook POST failed',
      meta: {
        ...logMeta,
        status: _.get(error, 'response.status'),
      },
      error,
    })
  }
}

// Updates the submission in the database with the webhook response
const updateSubmissionsDb = (formId, submissionId, updateObj) => {
  EncryptSubmission.updateOne(
    { _id: submissionId },
    { $push: { webhookResponses: updateObj } },
  )
    .then(({ nModified }) => {
      if (nModified !== 1) {
        // Pass on to catch block
        throw new Error('Submission not found in database.')
      }
    })
    .catch((error) => {
      logger.error({
        message: 'Database update for webhook status failed',
        meta: {
          action: 'updateSubmissionsDb',
          formId,
          submissionId,
          updateObj: stringifySafe(updateObj),
        },
        error,
      })
    })
}

// Formats webhook success info into an object to update Submissions collection
const getSuccessDbUpdate = (response, { webhookUrl, signature }) => {
  return { webhookUrl, signature, response: getFormattedResponse(response) }
}

// Formats webhook failure info into an object to update Submissions collection
const getFailureDbUpdate = (error, { webhookUrl, signature }) => {
  const errorMessage = _.get(error, 'message')
  const update = { webhookUrl, signature, errorMessage }
  if (!(error instanceof WebhookValidationError)) {
    update.response = getFormattedResponse(_.get(error, 'response'))
  }
  return update
}

// Formats a response object for update in the Submissions collection
const getFormattedResponse = (response = {}) => {
  return {
    status: response.status,
    statusText: response.statusText,
    headers: stringifySafe(response.headers),
    data: stringifySafe(response.data),
  }
}

module.exports = {
  postWebhook,
  handleWebhookSuccess,
  handleWebhookFailure,
  logWebhookFailure,
}
