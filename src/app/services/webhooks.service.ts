import axios, { AxiosError, AxiosResponse } from 'axios'
import { get } from 'lodash'
import mongoose from 'mongoose'

import formsgSdk from '../../config/formsg-sdk'
import { createLoggerWithLabel } from '../../config/logger'
// Prevents JSON.stringify error for circular JSONs and BigInts
import { stringifySafe } from '../../shared/util/stringify-safe'
import {
  IFormSchema,
  ISubmissionSchema,
  IWebhookResponse,
  WebhookParams,
} from '../../types'
import { getEncryptSubmissionModel } from '../models/submission.server.model'
import { WebhookValidationError } from '../utils/custom-errors'

const logger = createLoggerWithLabel(module)
const EncryptSubmission = getEncryptSubmissionModel(mongoose)

/**
 * Logs webhook failure in console and database.
 * @param {error} error Error object returned by axios
 * @param {Object} webhookParams Parameters which fully specify webhook
 * @param {string} webhookParams.webhookUrl URL to POST to
 * @param {Object} webhookParams.submissionWebhookView POST body
 * @param {string} webhookParams.submissionId
 * @param {string} webhookParams.formId
 * @param {string} webhookParams.now Epoch for POST header
 * @param {string} webhookParams.signature Signature generated by FormSG SDK
 */
export const handleWebhookFailure = async (
  error: Error | AxiosError,
  webhookParams: WebhookParams,
): Promise<any> => {
  logWebhookFailure(error, webhookParams)
  await updateSubmissionsDb(
    webhookParams.formId,
    webhookParams.submissionId,
    getFailureDbUpdate(error, webhookParams),
  )
}

/**
 * Logs webhook success in console and database.
 * @param {response} response Response object returned by axios
 * @param {Object} webhookParams Parameters which fully specify webhook
 * @param {string} webhookParams.webhookUrl URL to POST to
 * @param {Object} webhookParams.submissionWebhookView POST body
 * @param {string} webhookParams.submissionId
 * @param {string} webhookParams.formId
 * @param {string} webhookParams.now Epoch for POST header
 * @param {string} webhookParams.signature Signature generated by FormSG SDK
 */
export const handleWebhookSuccess = async (
  response: AxiosResponse,
  webhookParams: WebhookParams,
): Promise<any> => {
  logWebhookSuccess(response, webhookParams)
  await updateSubmissionsDb(
    webhookParams.formId,
    webhookParams.submissionId,
    getSuccessDbUpdate(response, webhookParams),
  )
}

/**
 * Sends webhook POST.
 * Note that the arguments are the same as those in webhookParams
 * for handleWebhookSuccess and handleWebhookFailure, just destructured.
 * @param {string} webhookUrl URL to POST to
 * @param {Object} submissionWebhookView POST body
 * @param {string} submissionId
 * @param {string} formId
 * @param {string} now Epoch for POST header
 * @param {string} signature Signature generated by FormSG SDK
 */
export const postWebhook = ({
  webhookUrl,
  submissionWebhookView,
  submissionId,
  formId,
  now,
  signature,
}: WebhookParams): Promise<AxiosResponse> => {
  return axios.post(webhookUrl, submissionWebhookView, {
    headers: {
      'X-FormSG-Signature': formsgSdk.webhooks.constructHeader({
        epoch: now,
        submissionId,
        formId,
        signature,
      }),
    },
    maxRedirects: 0,
  })
}

// Logging for webhook success
const logWebhookSuccess = (
  response: AxiosResponse,
  { webhookUrl, submissionId, formId, now, signature }: WebhookParams,
): void => {
  const status = get(response, 'status')

  logger.info({
    message: 'Webhook POST succeeded',
    meta: {
      action: 'logWebhookSuccess',
      status,
      submissionId,
      formId,
      now,
      webhookUrl,
      signature,
    },
  })
}

// Logging for webhook failure
export const logWebhookFailure = (
  error: Error | AxiosError,
  { webhookUrl, submissionId, formId, now, signature }: WebhookParams,
): void => {
  let logMeta = {
    action: 'logWebhookFailure',
    submissionId,
    formId,
    now,
    webhookUrl,
    signature,
  }

  if (error instanceof WebhookValidationError) {
    logger.error({
      message: 'Webhook not attempted',
      meta: logMeta,
      error,
    })
  } else {
    logger.error({
      message: 'Webhook POST failed',
      meta: {
        ...logMeta,
        status: get(error, 'response.status'),
      },
      error,
    })
  }
}

// Updates the submission in the database with the webhook response
const updateSubmissionsDb = async (
  formId: IFormSchema['_id'],
  submissionId: ISubmissionSchema['_id'],
  updateObj: IWebhookResponse,
): Promise<any> => {
  try {
    const { nModified } = await EncryptSubmission.updateOne(
      { _id: submissionId },
      { $push: { webhookResponses: updateObj } },
    )
    if (nModified !== 1) {
      // Pass on to catch block
      throw new Error('Submission not found in database.')
    }
  } catch (error) {
    logger.error({
      message: 'Database update for webhook status failed',
      meta: {
        action: 'updateSubmissionsDb',
        formId,
        submissionId,
        updateObj: stringifySafe(updateObj),
      },
      error,
    })
  }
}

// Formats webhook success info into an object to update Submissions collection
const getSuccessDbUpdate = (
  response: AxiosResponse,
  { webhookUrl, signature }: WebhookParams,
): IWebhookResponse => {
  return { webhookUrl, signature, ...getFormattedResponse(response) }
}

// Formats webhook failure info into an object to update Submissions collection
const getFailureDbUpdate = (
  error: Error | AxiosError,
  { webhookUrl, signature }: WebhookParams,
): IWebhookResponse => {
  const errorMessage = get(error, 'message')
  let update: IWebhookResponse = {
    webhookUrl,
    signature,
    errorMessage,
  }
  if (!(error instanceof WebhookValidationError)) {
    const { response } = getFormattedResponse(get(error, 'response'))
    update.response = response
  }
  return update
}

// Formats a response object for update in the Submissions collection
const getFormattedResponse = (
  response: AxiosResponse,
): Pick<IWebhookResponse, 'response'> => {
  return {
    response: {
      status: get(response, 'status'),
      statusText: get(response, 'statusText'),
      headers: stringifySafe(get(response, 'headers')),
      data: stringifySafe(get(response, 'data')),
    },
  }
}
