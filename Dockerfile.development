FROM node:hydrogen-alpine3.16
LABEL maintainer=FormSG<formsg@data.gov.sg>

WORKDIR /opt/formsg

RUN mkdir /mongodb_data
RUN chown 1001:1001 /mongodb_data

ENV CHROMIUM_BIN=/usr/bin/chromium-browser
ENV NODE_ENV=development
# --openssl-legacy-provider is required because...
ENV NODE_OPTIONS="--max-old-space-size=2048 --openssl-legacy-provider"
RUN apk update && apk upgrade && \
    # Build dependencies for node_modules
    apk add --virtual native-deps \
    # Python version must be specified starting in alpine3.12
    g++ gcc libgcc libstdc++ linux-headers autoconf automake make nasm python3 git curl \
    # Runtime dependencies
    # Note that each alpine version supports a specific version of chromium
    # Note that chromium and puppeteer-core are released together and it is the only version
    # that is guaranteed to work. Upgrades must be done in lockstep.
    # https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md#running-on-alpine
    # https://www.npmjs.com/package/puppeteer-core?activeTab=versions for corresponding versions
    chromium=102.0.5005.182-r0 \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    tini \
    # Localstack - these are necessary in order to initialise local S3 buckets
    # jq is a package for easily parsing Localstack health endpoint's JSON output
    jq \
    py-pip && \
    npm install --quiet node-gyp -g && \
    # [ver1] ensures that the underlying AWS CLI version is also installed
    pip install awscli-local[ver1]


# Tell Puppeteer to skip installing Chrome. We'll be using the installed package.
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# Chinese fonts
RUN echo @edge http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories && apk add wqy-zenhei@edge

COPY package*.json ./
# Use --legacy-peer-deps due to...
RUN npm install --legacy-peer-deps

COPY . ./

EXPOSE 5000

# tini is the init process that will adopt orphaned zombie processes
# e.g. chromium when launched to create a new PDF
ENTRYPOINT [ "tini", "--" ]
# Create local AWS resources before building the app
CMD sh init-localstack.sh && npm run dev:backend